{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cloudformation template for confluence deployment",
  "Parameters": {
    "ServiceName": {
      "Description": "Name of the service",
      "Type": "String"
    },
    "Environment": {
      "Description": "Environment we are deploying into",
      "Default": "sandbox",
      "Type": "String",
      "AllowedValues": [
        "prod",
        "stage",
        "sandbox"
      ],
      "ConstraintDescription": "Must specify prod, stage, or sandbox."
    },
    "BaseZone": {
      "Description": "Base zone to create route53 zone in",
      "Default": "nubis.allizom.org",
      "Type": "String"
    },
    "KeyName": {
      "Description": "Existing ssh key to deploy to EC2 instances",
      "Type": "String"
    },
    "TechnicalOwner": {
      "Description": "A valid LDAP email",
      "Type": "String"
    },
    "AmiId": {
      "Description": "The id of the ami for this region",
      "Type": "String"
    },
    "StorageClusterSize": {
      "Description": "The number of nodes in the storage cluster",
      "Type": "String",
      "Default": "3"
    },
    "StorageVolumeSize": {
      "Description": "The storage size (in GB) of each member of the storage cluster",
      "Type": "String",
      "Default": "16"
    },
    "StorageInstanceType": {
      "Description": "The instance type of each member of the storage cluster",
      "Type": "String",
      "Default": "m3.medium"
    }
  },
  "Mappings": {
    "InstanceTypeMap": {
      "prod": {
        "InstanceType": "m3.large"
      },
      "stage": {
        "InstanceType": "m3.medium"
      },
      "sandbox": {
        "InstanceType": "m3.medium"
      }
    }
  },
  "Resources": {
    "EC2Stack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/nubisproject-stacks/master/ec2.template",
        "TimeoutInMinutes": "60",
        "Parameters": {
          "StackName": {
            "Ref": "AWS::StackName"
          },
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "AmiId": {
            "Ref": "AmiId"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "InstanceType": {
            "Fn::FindInMap": [
              "InstanceTypeMap",
              {
                "Ref": "Environment"
              },
              "InstanceType"
            ]
          },
          "ELB": {
            "Fn::GetAtt": [
              "ELBStack",
              "Outputs.ELB"
            ]
          }
        }
      }
    },
    "ELBStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/nubisproject-stacks/master/elb.template",
        "TimeoutInMinutes": "60",
        "Parameters": {
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "ElbHealthTarget": "HTTP:80/"
        }
      }
    },
    "Route53Stack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/nubisproject-stacks/master/route53.template",
        "TimeoutInMinutes": "60",
        "Parameters": {
          "DNSName": {
            "Ref": "AWS::StackName"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "BaseZone": {
            "Ref": "BaseZone"
          },
          "ELBStack": {
            "Fn::GetAtt": [
              "ELBStack",
              "Outputs.DNSName"
            ]
          }
        }
      }
    }
  },
  "RDSStack": {
    "Type": "AWS::CloudFormation::Stack",
    "Properties": {
      "TemplateURL": "https://s3.amazonaws.com/nubisproject-stacks/master/rds-postgres.template",
      "TimeoutInMinutes": "60",
      "Parameters": {
        "ServiceName": {
          "Ref": "ServiceName"
        },
        "TechnicalOwner": {
          "Ref": "TechnicalOwner"
        },
        "Environment": {
          "Ref": "Environment"
        },
        "AllocatedStorage": "15",
        "DBInstanceClass": "db.t1.micro",
        "DBName": {
          "Ref": "ServiceName"
        },
        "EC2SecurityGroup": {
          "Fn::GetAtt": [
            "EC2Stack",
            "Outputs.EC2SecurityGroup"
          ]
        }
      }
    }
  },
  "StorageStack": {
    "Type": "AWS::CloudFormation::Stack",
    "Properties": {
      "TemplateURL": "https://s3.amazonaws.com/nubisproject-stacks/master/storage.template",
      "TimeoutInMinutes": "60",
      "Parameters": {
        "StackName": {
          "Ref": "AWS::StackName"
        },
        "ServiceName": {
          "Ref": "ServiceName"
        },
        "TechnicalOwner": {
          "Ref": "TechnicalOwner"
        },
        "Environment": {
          "Ref": "Environment"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": {
          "Ref": "StorageInstanceType"
        },
        "ClusterSize": {
          "Ref": "StorageClusterSize"
        },
        "VolumeSize": {
          "Ref": "StorageVolumeSize"
        },
        "EC2SecurityGroup": {
          "Fn::GetAtt": [
            "EC2Stack",
            "Outputs.GroupId"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ELBDNSName": {
      "Description": "Consul: / ELB CNAME",
      "Value": {
        "Fn::GetAtt": [
          "ELBStack",
          "Outputs.DNSName"
        ]
      }
    },
    "DBServer": {
      "Description": "Consul: config/ Database endpoint",
      "Value": {
        "Fn::GetAtt": [
          "RDSStack",
          "Outputs.RDSEndpoint"
        ]
      }
    }
  }
}
